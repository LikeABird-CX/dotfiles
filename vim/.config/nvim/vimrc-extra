" https://github.com/christoomey/vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <a-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <a-j> :TmuxNavigateDown<cr>
nnoremap <silent> <a-k> :TmuxNavigateUp<cr>
nnoremap <silent> <a-l> :TmuxNavigateRight<cr>
nnoremap <silent> <a-\> :TmuxNavigatePrevious<cr>

" ============================================================================
" FZF {{{
" ============================================================================
command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})
nnoremap <silent> <Leader>fm :FZFMru<cr>

" FZF
" ctrl-[a-z], alt-[a-z], f[1-4], or any single character
let g:fzf_action = {
  \ 'ctrl-m': 'e',
  \ 'ctrl-t': 'tabedit',
  \ 'alt-j':  'botright split',
  \ 'alt-k':  'topleft split',
  \ 'alt-h':  'vertical topleft split',
  \ 'alt-l':  'vertical botright split' }
nnoremap <silent> <c-p> :FZF<cr>

" FZFLines
function! s:line_handler(l)
  let keys = split(a:l, ':\t')
  exec 'buf' keys[0]
  exec keys[1]
  normal! ^zz
endfunction

function! s:buffer_lines()
  let res = []
  for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
    call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
  endfor
  return res
endfunction

command! FZFLines call fzf#run({
\   'source':  <sid>buffer_lines(),
\   'sink':    function('<sid>line_handler'),
\   'options': '--extended --nth=3..',
\   'down':    '60%'
\})
nnoremap <silent> <Leader>fl :FZFLines<cr>

" }}}

" `vim-easyclip` shadow mark feature
" https://github.com/svermeulen/vim-easyclip/blob/master/doc/easyclip.txt
nnoremap gm m

" Maps resizing a window split, use _ instead - for easy to type
nnoremap <silent> _ <C-W>-<C-W>-<C-W>-
nnoremap <silent> + <C-W>+<C-W>+<C-W>+
nnoremap <silent> <M-<> <C-W><<C-W><<C-W><<C-W><<C-W><
nnoremap <silent> <M->> <C-W>><C-W>><c-w>><c-w>><c-w>>

" http://www.jovicailic.org/2015/05/saving-read-only-files-in-vim-sudo-trick
cmap w!! w !sudo tee % >/dev/null
